import os
import gc
import torch
import numpy as np
import soundfile as sf
import librosa

# Jukebox imports
import jukebox
from jukebox.make_models import make_model
from jukebox.hparams import Hyperparams
from jukebox.sample import sample_single_window
from pydub import AudioSegment

# Global handles
model = None
prior = None
vqvae = None
hps = None

SAMPLE_RATE = 44100
OUTPUT_FOLDER = '/app/output'
os.makedirs(OUTPUT_FOLDER, exist_ok=True)

def load_model_impl():
    """Load the OpenAI Jukebox 1B-lyrics model."""
    global model, prior, vqvae, hps
    if model is not None:
        return True
    try:
        print('Loading Jukebox model...')
        hps = Hyperparams()
        hps.sr = SAMPLE_RATE
        hps.n_samples = 1
        hps.name = 'samples'
        hps.levels = 3
        hps.hop_fraction = [0.5, 0.5, 0.125]
        vqvae, priors = make_model(hps, device='cuda' if torch.cuda.is_available() else 'cpu')
        prior = priors[2]
        model = {'vqvae': vqvae, 'prior': prior}
        print('Jukebox model loaded.')
        return True
    except Exception as e:
        print(f'Error loading Jukebox: {e}')
        return False

def unload_model_impl():
    """Unload Jukebox and free GPU memory."""
    global model, prior, vqvae, hps
    if model is None:
        return True
    try:
        model = prior = vqvae = hps = None
        gc.collect()
        if torch.cuda.is_available():
            torch.cuda.empty_cache()
        print('Jukebox unloaded.')
        return True
    except Exception as e:
        print(f'Error unloading Jukebox: {e}')
        return False

def generate_impl(content_prompt, style_prompt, has_vocals, output_path):
    """Generate ~30s of music with Jukebox."""
    global model, prior, vqvae, hps
    if model is None and not load_model_impl():
        return False, 0.0
    try:
        metas = [{
            'artist': 'AI',
            'genre': style_prompt or 'unknown',
            'total_length': 30,
            'offset': 0,
            'lyrics': content_prompt if has_vocals else ''
        }]
        zs = [torch.zeros(1, 0, dtype=torch.long) for _ in range(hps.levels)]
        codes = sample_single_window(
            zs=zs,
            conditioning={},
            chunk_size=32,
            sampling_kwargs={
                'temp': 0.7,
                'fp16': True,
                'top_k': 200,
                'top_p': 0.95
            },
            hps=hps,
            metas=metas,
            priors=[prior],
            vqvae=vqvae,
            sample_tokens=hps.sr * 30 // int(hps.hop_fraction[-1] * hps.sr),
            device='cuda' if torch.cuda.is_available() else 'cpu'
        )
        with torch.no_grad():
            audio = vqvae.decode(codes, sample_rate=hps.sr)
        audio_np = audio.squeeze().cpu().numpy()
        audio_np = audio_np / np.abs(audio_np).max()
        sf.write(output_path, audio_np, samplerate=SAMPLE_RATE)
        convert_to_mp3(output_path, output_path.replace(".wav", ".mp3"))
        duration = librosa.get_duration(y=audio_np, sr=SAMPLE_RATE)
        return True, duration
    except Exception as e:
        print(f'Error generating with Jukebox: {e}')
        return False, 0.0

def extend_impl(source_path, output_path, extend_duration, content_prompt, style_prompt, has_vocals):
    """Extend by crossfading new segment onto existing audio."""
    ok, _ = generate_impl(content_prompt + ' continue', style_prompt, has_vocals, output_path + '.new.wav')
    if not ok:
        return False, 0.0
    try:
        orig, _ = librosa.load(source_path, sr=SAMPLE_RATE)
        new, _ = librosa.load(output_path + '.new.wav', sr=SAMPLE_RATE)
        fade = min(len(orig), len(new), SAMPLE_RATE)
        fade_out = np.linspace(1, 0, fade)
        fade_in = np.linspace(0, 1, fade)
        mix = orig[-fade:] * fade_out + new[:fade] * fade_in
        combined = np.concatenate([orig[:-fade], mix, new[fade:]])
        sf.write(output_path, combined, samplerate=SAMPLE_RATE)
        convert_to_mp3(output_path, output_path.replace(".wav", ".mp3"))
        os.remove(output_path + '.new.wav')
        duration = librosa.get_duration(y=combined, sr=SAMPLE_RATE)
        return True, duration
    except Exception as e:
        print(f'Error extending audio with Jukebox: {e}')
        return False, 0.0

def remix_impl(source_path, output_path, content_prompt, style_prompt, has_vocals):
    """Remix by re-generating full audio based on prompt."""
    return generate_impl(f"Remix of: {content_prompt}", style_prompt, has_vocals, output_path)

def convert_to_mp3(wav_path, mp3_path):
    try:
        sound = AudioSegment.from_wav(wav_path)
        sound.export(mp3_path, format="mp3")
        print(f"Converted {wav_path} to {mp3_path}")
    except Exception as e:
        print(f"‚ùå Fout bij conversie naar mp3: {e}")

