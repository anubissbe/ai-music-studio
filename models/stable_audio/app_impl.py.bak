import os
import soundfile as sf
import librosa
import numpy as np
import torch
import gc
from audiocraft.models import MusicGen
from pydub import AudioSegment

model = None
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

OUTPUT_FOLDER = '/app/output'
os.makedirs(OUTPUT_FOLDER, exist_ok=True)


def load_musicgen_model():
    global model
    try:
        if model is not None:
            return True
        print("Loading MusicGen model...")
        model = MusicGen.get_pretrained('melody')
        model.set_generation_params(duration=30)
        model.to(device)
        print("MusicGen model loaded successfully.")
        return True
    except Exception as e:
        print(f"Error loading MusicGen model: {str(e)}")
        return False


def unload_musicgen_model():
    global model
    try:
        if model is None:
            return True
        print("Unloading MusicGen model...")
        model = None
        gc.collect()
        if torch.cuda.is_available():
            torch.cuda.empty_cache()
        print("MusicGen model unloaded successfully.")
        return True
    except Exception as e:
        print(f"Error unloading MusicGen model: {str(e)}")
        return False


def generate_music(content_prompt, style_prompt, has_vocals, output_path):
    global model
    try:
        if model is None and not load_musicgen_model():
            return False, 0

        combined_prompt = content_prompt
        if style_prompt:
            combined_prompt += f" in the style of {style_prompt}"
        if not has_vocals:
            combined_prompt += ". Instrumental only, no vocals."

        print(f"Generating music with prompt: {combined_prompt}")
        audio_output = model.generate([combined_prompt])
        audio_numpy = audio_output.cpu().numpy()[0, 0]

        sf.write(output_path, audio_numpy, samplerate=32000)
        convert_to_mp3(output_path, output_path.replace(".wav", ".mp3"))

        duration = librosa.get_duration(y=audio_numpy, sr=32000)
        return True, duration
    except Exception as e:
        print(f"Error generating music: {str(e)}")
        return False, 0


def extend_track(source_track_path, output_path, extend_duration, content_prompt, style_prompt, has_vocals):
    global model
    try:
        if model is None and not load_musicgen_model():
            return False, 0

        original_audio, sr = librosa.load(source_track_path, sr=32000)
        combined_prompt = content_prompt
        if style_prompt:
            combined_prompt += f" in the style of {style_prompt}"
        if not has_vocals:
            combined_prompt += ". Instrumental only, no vocals."
        combined_prompt += " Continuation of the previous section, maintain the same style and theme."

        print(f"Extending track with prompt: {combined_prompt}")
        model.set_generation_params(duration=extend_duration)
        extension_audio = model.generate([combined_prompt]).cpu().numpy()[0, 0]
        extended_audio = np.concatenate([original_audio, extension_audio])

        sf.write(output_path, extended_audio, samplerate=32000)
        convert_to_mp3(output_path, output_path.replace(".wav", ".mp3"))

        duration = librosa.get_duration(y=extended_audio, sr=32000)
        return True, duration
    except Exception as e:
        print(f"Error extending track: {str(e)}")
        return False, 0


def remix_track(source_track_path, output_path, content_prompt, style_prompt, has_vocals):
    global model
    try:
        if model is None and not load_musicgen_model():
            return False, 0

        original_audio, sr = librosa.load(source_track_path, sr=32000, duration=10)
        combined_prompt = f"Remix of: {content_prompt}"
        if style_prompt:
            combined_prompt += f" in the style of {style_prompt}"
        if not has_vocals:
            combined_prompt += ". Instrumental only, no vocals."

        print(f"Remixing track with prompt: {combined_prompt}")
        model.set_generation_params(duration=30)
        remix_audio = model.generate([combined_prompt]).cpu().numpy()[0, 0]

        sf.write(output_path, remix_audio, samplerate=32000)
        convert_to_mp3(output_path, output_path.replace(".wav", ".mp3"))

        duration = librosa.get_duration(y=remix_audio, sr=32000)
        return True, duration
    except Exception as e:
        print(f"Error remixing track: {str(e)}")
        return False, 0


def convert_to_mp3(wav_path, mp3_path):
    try:
        sound = AudioSegment.from_wav(wav_path)
        sound.export(mp3_path, format="mp3")
        print(f"Converted {wav_path} to {mp3_path}")
    except Exception as e:
        print(f"‚ùå Fout bij conversie naar mp3: {e}")

